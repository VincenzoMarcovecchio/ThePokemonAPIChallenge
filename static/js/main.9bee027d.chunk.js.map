{"version":3,"sources":["screens/PokeSingolo.js","helpers/localStorageFunctions.js","helpers/typeColors.js","components/Card/Card.js","components/Card/index.js","screens/PokeDeck.js","components/Navbar/Navbar.js","components/Navbar/index.js","services/pokemon.js","helpers/timeoutFunc.js","App.js","serviceWorker.js","index.js"],"names":["PokeSingolo","location","useLocation","useState","loading","setLoading","setError","single","setSingle","useEffect","a","fetch","pathname","response","json","resData","fetchData","name","weight","savePokeToLocalStorage","data","JSON","parse","localStorage","getItem","push","Set","setItem","stringify","getPokeFromLocalStorage","b","removePokeFromLocalStorage","console","log","poke","i","length","splice","filter","pok","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Card","pokemon","history","useHistory","className","src","sprites","front_default","alt","types","map","type","index","key","style","backgroundColor","height","abilities","ability","onClick","includes","then","window","reload","PokeDeck","pokemonData","setPokemonData","arrays","setArrays","pokestorage","store","lol","res","dat","id","Navbar","to","href","getPokemon","Promise","resolve","reject","url","getAllPokemon","Message","children","show","setShow","timeId","setTimeout","clearTimeout","App","nextUrl","setNextUrl","prevUrl","setPrevUrl","initialURL","queryResult","setQueryResult","query","setQuery","submit","setSubmit","error","searchLoad","setSearchLoad","next","previous","loadPokemon","results","prev","all","pokemonRecord","_pokemonData","Fragment","exact","path","onSubmit","e","preventDefault","value","onChange","target","textAlign","game_indices","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bee027d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nexport const PokeSingolo = () => {\r\n  let location = useLocation()\r\n\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState(false)\r\n  const [single, setSingle] = useState({})\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        let response = await fetch(\r\n          `https://pokeapi.co/api/v2${location.pathname}`,\r\n        )\r\n        let resData = await response.json()\r\n        await setSingle(resData)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        setError(true)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [location.pathname])\r\n\r\n  return loading ? (\r\n    'loading'\r\n  ) : (\r\n    <figure>\r\n      <h1>{single.name} </h1>\r\n      <figcaption>\r\n        <p>weight:&nbsp;{single.weight}</p>\r\n\r\n        {/* <img src={} alt={queryResult.name} /> */}\r\n      </figcaption>\r\n    </figure>\r\n  )\r\n}\r\n","export const savePokeToLocalStorage = async (data) => {\r\n  let a = []\r\n\r\n  a = (await JSON.parse(localStorage.getItem('pokemon'))) || []\r\n\r\n  await a.push(data)\r\n  a = [...new Set(a)]\r\n  localStorage.setItem('pokemon', JSON.stringify(a))\r\n}\r\n\r\nexport const getPokeFromLocalStorage = async () => {\r\n  let b\r\n\r\n  b = [...new Set(await JSON.parse(localStorage.getItem('pokemon')))]\r\n\r\n  return b\r\n}\r\n\r\nexport const removePokeFromLocalStorage = async (name) => {\r\n  console.log(name)\r\n  var poke = JSON.parse(localStorage.getItem('pokemon'))\r\n\r\n  for (var i = 0; i < poke.length; i++) {\r\n    //loop over the collection\r\n    if (poke[i] === name) {\r\n      poke.splice(i, 1) //remove item from array\r\n      break //exit loop\r\n    }\r\n  }\r\n\r\n  poke.filter((pok) => pok[name] !== name)\r\n  console.log(poke)\r\n  localStorage.setItem('pokemon', JSON.stringify(poke))\r\n}\r\n","const typeColors = {\r\n    bug: '#729f3f',\r\n    dragon: '#53a4cf',\r\n    fairy: '#fdb9e9',\r\n    fire: '#fd7d24',\r\n    ghost: '#7b62a3',\r\n    ground: '#f7de3f',\r\n    normal: '#a4acaf',\r\n    pyschic: '#f366b9',\r\n    steel: '#9eb7b',\r\n    dark: '#707070',\r\n    electric: '#eed535',\r\n    fighting: '#d56723',\r\n    flying: '#3dc7ef',\r\n    grass: '#9bcc50',\r\n    ice: '#51c4e7',\r\n    poison: '#b97fc9',\r\n    rock: '#a38c21',\r\n    water: '#4592c4'\r\n}\r\n\r\nexport default typeColors;","import React from 'react'\r\nimport typeColors from '../../helpers/typeColors'\r\nimport './style.css'\r\nimport PropTypes from 'prop-types'\r\nimport { useHistory } from 'react-router-dom'\r\nimport {\r\n  savePokeToLocalStorage,\r\n  removePokeFromLocalStorage,\r\n} from '../../helpers/localStorageFunctions'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\n// Card.propTypes = {\r\n//   pokemon: PropTypes.shape({\r\n//     cca2: PropTypes.string.isRequired,\r\n//     region: PropTypes.string.isRequired,\r\n//     name: PropTypes.shape({\r\n//       common: PropTypes.string.isRequired,\r\n//     }).isRequired,\r\n//   }).isRequired,\r\n// }\r\n\r\nfunction Card({ pokemon }) {\r\n  let history = useHistory()\r\n  let location = useLocation()\r\n  return (\r\n    <div className=\"Card\">\r\n      <div className=\"Card__img\">\r\n        <img src={pokemon.sprites.front_default} alt=\"\" />\r\n      </div>\r\n      <div className=\"Card__name\">{pokemon.name}</div>\r\n      <div className=\"Card__types\">\r\n        {pokemon.types.map((type, index) => {\r\n          return (\r\n            <div\r\n              key={index}\r\n              className=\"Card__type\"\r\n              style={{ backgroundColor: typeColors[type.type.name] }}\r\n            >\r\n              {type.type.name}\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n      <div className=\"Card__info\">\r\n        <div className=\"Card__data Card__data--weight\">\r\n          <p className=\"title\">Weight</p>\r\n          <p>{pokemon.weight}</p>\r\n        </div>\r\n        <div className=\"Card__data Card__data--weight\">\r\n          <p className=\"title\">Height</p>\r\n          <p>{pokemon.height}</p>\r\n        </div>\r\n        <div className=\"Card__data Card__data--ability\">\r\n          <p className=\"title\">Ability</p>\r\n          <p>{pokemon.abilities[0].ability.name}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"info-container\">\r\n        <button onClick={() => history.push(`pokemon/${pokemon.name}`)}>\r\n          piu' info\r\n        </button>\r\n        {!location.pathname.includes('deck') && (\r\n          <button onClick={() => savePokeToLocalStorage(pokemon.name)}>\r\n            aggiungi al deck\r\n          </button>\r\n        )}\r\n        {location.pathname.includes('deck') && (\r\n          <button\r\n            onClick={() =>\r\n              removePokeFromLocalStorage(pokemon.name).then(() =>\r\n                window.location.reload(),\r\n              )\r\n            }\r\n          >\r\n            rimuovi\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import Card from './Card';\r\n\r\nexport default Card;","import React, { useEffect, useState } from 'react'\r\nimport { getPokeFromLocalStorage } from '../helpers/localStorageFunctions'\r\nimport Card from '../components/Card'\r\n\r\nfunction PokeDeck() {\r\n  const [pokemonData, setPokemonData] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState(false)\r\n  const [arrays, setArrays] = useState([])\r\n\r\n  console.log(pokemonData)\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      let pokestorage = await getPokeFromLocalStorage()\r\n      setArrays(pokestorage)\r\n      setLoading(false)\r\n      setError(false)\r\n    }\r\n\r\n    fetchData()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    let store = []\r\n    arrays.map((lol) => {\r\n      fetch(`https://pokeapi.co/api/v2/pokemon/${lol}`)\r\n        .then((res) => res.json())\r\n        .then((dat) => store.push(dat))\r\n    })\r\n    setPokemonData(store)\r\n  }, [arrays])\r\n\r\n  return (\r\n    <div>\r\n      {pokemonData.map((data) => {\r\n        return <Card key={data.id} pokemon={data} />\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PokeDeck\r\n","import React from 'react'\r\nimport './style.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <Link to=\"/\">Pokemon API&nbsp;&nbsp;&nbsp;&nbsp;</Link>\r\n      <a href=\"https://vincenzomarcovecchio.github.io/ThePokemonAPIChallenge/deck\">\r\n        Mycatch\r\n      </a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import Navbar from './Navbar';\r\n\r\nexport default Navbar;","export function getPokemon(data) {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(data.url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        resolve(data)\r\n      })\r\n  })\r\n}\r\n\r\nexport function getStoredPokemon(data) {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(`https://pokeapi.co/api/v2/pokemon/${data}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        resolve(data)\r\n      })\r\n  })\r\n}\r\n\r\nexport async function getAllPokemon(url) {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        resolve(data)\r\n      })\r\n  })\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nexport const Message = ({ children }) => {\r\n  const [show, setShow] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const timeId = setTimeout(() => {\r\n      setShow(false)\r\n    }, 2000)\r\n\r\n    return () => {\r\n      clearTimeout(timeId)\r\n    }\r\n  }, [])\r\n\r\n  if (!show) {\r\n    return null\r\n  }\r\n\r\n  return <h3 className={`alert-error`}>{children}</h3>\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\nimport { PokeSingolo } from './screens/PokeSingolo'\r\nimport PokeDeck from './screens/PokeDeck'\r\n\r\nimport Navbar from './components/Navbar'\r\nimport Card from './components/Card'\r\nimport { getPokemon, getAllPokemon } from './services/pokemon'\r\nimport { Message } from './helpers/timeoutFunc'\r\n\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  const [pokemonData, setPokemonData] = useState([])\r\n  const [nextUrl, setNextUrl] = useState('')\r\n  const [prevUrl, setPrevUrl] = useState('')\r\n  const [loading, setLoading] = useState(true)\r\n  const initialURL = 'https://pokeapi.co/api/v2/pokemon'\r\n  const [queryResult, setQueryResult] = useState({})\r\n  const [query, setQuery] = useState('')\r\n  const [submit, setSubmit] = useState(false)\r\n  const [error, setError] = useState(false)\r\n  const [searchLoad, setSearchLoad] = useState(false)\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        let response = await fetch(`https://pokeapi.co/api/v2/pokemon/${query}`)\r\n        let resData = await response.json()\r\n        setQueryResult(resData)\r\n      } catch (error) {\r\n        setError(true)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n\r\n    return () => {\r\n      setError(false)\r\n      setSubmit(false)\r\n      setSearchLoad(false)\r\n    }\r\n  }, [submit])\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      let response = await getAllPokemon(initialURL)\r\n      setNextUrl(response.next)\r\n      setPrevUrl(response.previous)\r\n      await loadPokemon(response.results)\r\n      setLoading(false)\r\n      setError(false)\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n  const next = async () => {\r\n    setLoading(true)\r\n    let data = await getAllPokemon(nextUrl)\r\n    await loadPokemon(data.results)\r\n    setNextUrl(data.next)\r\n    setPrevUrl(data.previous)\r\n    setLoading(false)\r\n    setError(false)\r\n  }\r\n\r\n  const prev = async () => {\r\n    if (!prevUrl) return\r\n    setLoading(true)\r\n    let data = await getAllPokemon(prevUrl)\r\n    await loadPokemon(data.results)\r\n    setNextUrl(data.next)\r\n    setPrevUrl(data.previous)\r\n    setLoading(false)\r\n    setError(false)\r\n  }\r\n\r\n  const loadPokemon = async (data) => {\r\n    let _pokemonData = await Promise.all(\r\n      data.map(async (pokemon) => {\r\n        let pokemonRecord = await getPokemon(pokemon)\r\n        return pokemonRecord\r\n      }),\r\n    )\r\n    setPokemonData(_pokemonData)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <Navbar />\r\n        <main>\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path=\"https://vincenzomarcovecchio.github.io/ThePokemonAPIChallenge/\"\r\n            >\r\n              <div>\r\n                <form\r\n                  className=\"btn\"\r\n                  onSubmit={(e) => (e.preventDefault(), setSubmit(true))}\r\n                >\r\n                  <input\r\n                    value={query}\r\n                    onChange={(e) => setQuery(e.target.value)}\r\n                  />\r\n                  <button type=\"submit\">cerca</button>\r\n                </form>\r\n                {searchLoad ? <h2>loading</h2> : null}\r\n                {loading ? (\r\n                  <h1 style={{ textAlign: 'center' }}>Loading...</h1>\r\n                ) : (\r\n                  <>\r\n                    {error ? (\r\n                      <Message>\r\n                        Hai sbagliato nome del pokemon oppure ci sono stati\r\n                        altri errori\r\n                      </Message>\r\n                    ) : null}\r\n                    <div className=\"btn\">\r\n                      {!queryResult.game_indices && (\r\n                        <>\r\n                          <button onClick={prev}>Prev</button>\r\n                          <button onClick={next}>Next</button>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"grid-container\">\r\n                      {queryResult.game_indices ? (\r\n                        <Card pokemon={queryResult} />\r\n                      ) : (\r\n                        pokemonData.map((pokemon, i) => {\r\n                          return <Card key={i} pokemon={pokemon} />\r\n                        })\r\n                      )}\r\n                    </div>\r\n                    <div className=\"btn\">\r\n                      {!queryResult.game_indices && (\r\n                        <>\r\n                          <button onClick={prev}>Prev</button>\r\n                          <button onClick={next}>Next</button>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            </Route>\r\n            <Route\r\n              exact\r\n              path=\"https://vincenzomarcovecchio.github.io/ThePokemonAPIChallenge/pokemon/:slug\"\r\n            >\r\n              <PokeSingolo />\r\n            </Route>\r\n            <Route path=\"https://vincenzomarcovecchio.github.io/ThePokemonAPIChallenge/deck\">\r\n              <PokeDeck />\r\n            </Route>\r\n          </Switch>\r\n        </main>\r\n      </Router>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}